The maximum Fibonacci number we could calculate was the 51th number of the series on our computers on
a reasonable time; as a side note, we could calculate bigger values but the time of doing so isn't worth
it compared to the computational cost. We couldn't calculate bigger for two reasons: 

- The time would be really big, as of lasting days or weeks to calculate.
- The ram of the computer has a limited space so, even if we set the stack size to a really big 
number, the memory consumed will eventually occupied the whole ram memory.

The number of operations the computer has to do for big values is approximately in the order of 
an exponential base 2. In this manner, to calculate the millionth term of the series it would need
around 2^(10^6), even if we had a 4 GHz computer processor the time it would take whould be
2^(10^6-2)*10^-9. Additionally, if we had infinite time to calculate this term we cannot solve the
problem that we do need finite memory to fill the stack memory for the recursion.
