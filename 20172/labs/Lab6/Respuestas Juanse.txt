3.2 Both are digraphs, since the edges have direction. Both have a data structure
to save the edges' information; the first one has a matrix $A_{nxn}$ that inserts
a GraphObj in the position $i,j$ if the node $i$ is connected with the $j$ one. The GraphObj
has value, weight and a Python dictionary for further attributes of the edge. On the
other hand, the second implementation has a linked list with all the children (nodes that
are connected to the node we are on). The insertion works similarly in both cases, the user has
to insert the parent and the child, making an edge between the parent and the child. Check the
\texttt{DataStructures.py} file in the codigo folder for the source code.

3.3 The matrix representation is more useful when the important things are the
connections, not the weights; so, in a simple graph the matrix representation
is a fairly good approach to represent it better. But, the priority is to use
''greedy algorithms'' or a really big sample of data de linked list
representation is much better.

3.4 As we know that it is a graph related to a city, one can note that it is not possible
(or HIGHLY unlikely) that all nodes are connected to each other. Therefore, if a matrix
representation is used, there will be a lot of empty spaces in the matrix. So it is definitely
better to implement the liked list representation for a city graph.

3.5 It's better to use the linked list representation because, of the big size
of the data (so we can optimize memory) and this type of data is a priority to
search for smallest path and more.

3.6 The linked list implementation will be more practical since one will be interested in the
nodes that are connected; therefore, if this implementation is used, you will know immediately
the nodes that are connected, you won't have to check the whole row in the matrix for the nodes
connected. Additionally, the matrix one consumes a lot of memory, which is never good.
